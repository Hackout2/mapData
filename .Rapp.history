cholera$deaths@coords$coords.x1
cholera$deaths@coords[,"coords.x1"]
mapply(rep, cholera$deaths@coords[,"coords.x1"], times = cholera$deaths@data$Count)
unlist(mapply(rep, cholera$deaths@coords[,"coords.x1"], times = cholera$deaths@data$Count))
source("/Users/Joanna/Documents/hackout/make_linelist.R")
head(ll)
ll$sex <- rbinom(nrow(ll), 1, 0.5)
head(ll)
summary(ll)
source("/Users/Joanna/Documents/hackout/make_linelist.R")
head(ll)
summary(ll)
ll$age <- runif(nrow(ll, 0, 40))
ll$age <- runif(nrow(ll), 0, 40)
head(ll)
summary(ll)
save(ll, snow_linelist.RData)
save(ll, "snow_linelist.RData")
save(ll, file=snow_linelist.RData)
save(ll, file="snow_linelist.RData")
rm(list=ls())
load("/Users/Joanna/snow_linelist.RData")
ls()
summary(ll)
source("/Users/Joanna/Documents/hackout/make_linelist.R")
load("/Users/Joanna/Documents/hackout/mapData/data/snow_linelist.rda")
source("/Users/Joanna/Documents/hackout/make_linelist.R")
ll[,2:3]
is(ll[,2:3])
head(ll)
# convert to a SpatialPointsDataFrame#
cases <- SpatialPointsDataFrame(#
	coords = ll[,2:3],#
	data = ll[,c(1,4,5)]#
	)
str(cases)
source("/Users/Joanna/Documents/hackout/make_linelist.R")
load("/Users/Joanna/Documents/hackout/mapData/data/snow_linelist.rda")
rm(list=ls())
load("/Users/Joanna/Documents/hackout/mapData/data/snow_linelist.rda")
devtools::install_github("Hackout2/mapData")
remove.package(mapData)
remove.packages(mapData)
remove.packages("mapData")
source("/Users/Joanna/Documents/hackout/mapData_demo.R")
density_data(snow_linelist)
remove.packages("mapData")
source("/Users/Joanna/Documents/hackout/mapData_demo.R")
density_data(snow_linelist)
ls()
density_data(ll)
source("/Users/Joanna/Documents/hackout/make_linelist.R")
load("/Users/Joanna/Documents/hackout/mapData/data/snow_linelist.rda")
ls()
density_data(cases)
####################################
# This file was used to create a line list for the cholera dataset in epimap.#
####################################
#
rm(list=ls())#
set.seed(12345)#
#
library(sp)#
#
load("/Users/Joanna/Documents/hackout/cholera.RData")#
#
# location data from cholera.RData#
ll <- data.frame(#
	id = 1:sum(cholera$deaths@data$Count),#
	x1 = unlist(mapply(rep, cholera$deaths@coords[,"coords.x1"], times = cholera$deaths@data$Count)),#
	x2 = unlist(mapply(rep, cholera$deaths@coords[,"coords.x2"], times = cholera$deaths@data$Count)))#
# simulate age and sex#
ll$sex <- factor(rbinom(nrow(ll), 1, 0.5), levels=c(0,1), labels=c("male", "female"))#
ll$age <- runif(nrow(ll), 0, 40)#
#
# convert to a SpatialPointsDataFrame#
cases <- SpatialPointsDataFrame(#
	coords = ll[,2:3],#
	data = ll[,c(1,4,5)]#
	)
cases
density_data(cases)
remove.packages("mapData")
# script to test the mapData demo#
#
rm(list=ls())#
#
# installation and initialisation#
devtools::install_github("Hackout2/mapData")#
library(mapData)#
data(snow_linelist)
density_data(cases)
ls()
cases
####################################
# This file was used to create a line list for the cholera dataset in epimap.#
####################################
#
rm(list=ls())#
set.seed(12345)#
#
library(sp)#
#
load("/Users/Joanna/Documents/hackout/cholera.RData")#
#
# location data from cholera.RData#
ll <- data.frame(#
	id = 1:sum(cholera$deaths@data$Count),#
	x1 = unlist(mapply(rep, cholera$deaths@coords[,"coords.x1"], times = cholera$deaths@data$Count)),#
	x2 = unlist(mapply(rep, cholera$deaths@coords[,"coords.x2"], times = cholera$deaths@data$Count)))#
# simulate age and sex#
ll$sex <- factor(rbinom(nrow(ll), 1, 0.5), levels=c(0,1), labels=c("male", "female"))#
ll$age <- runif(nrow(ll), 0, 40)#
#
# convert to a SpatialPointsDataFrame#
cases <- SpatialPointsDataFrame(#
	coords = ll[,2:3],#
	data = ll[,c(1,4,5)]#
	)#
#
# save as RData#
save(cases, file="snow_linelist.rda")
load("/Users/Joanna/Documents/hackout/mapData/data/snow_linelist.rda")
density_data(cases)
rm(list=ls())
load("/Users/Joanna/Desktop/snow_linelist.rda")
density_data(cases)
data(snow_linelist)
ls()
data()
ls()
# script to test the mapData demo#
#
rm(list=ls())#
#
# installation and initialisation#
devtools::install_github("Hackout2/mapData")
library(mapData)
data(snow_linelist)
ls()
rm(cases)
ls()
data(snow_linelist)
ls()
load("/Users/Joanna/Desktop/snow_linelist.rda")
ls()
load("/Users/Joanna/Desktop/snow_linelist.rda")
ls()
is(cases)
density_data(cases)
str(cases)
nrow(cases@data)
locations <- density_data(cases)
nrow(location)
nrow(locations)
head(locations)
is(locations)
source("/Users/Joanna/Documents/hackout/mapData_demo.R")
locations <- density_data(cases)
head(locations)
nrow(cases@data)  # 489 cases were reported in total
nrow(locations)   # ... involving 250 unique locations
source("/Users/Joanna/Documents/hackout/pump_shapefile.R")
spdf <- SpatialPolygonsDataFrame(polylist)
ls()
ls(cholera)
str(cholera$pumps)
cholera$pumps@data
length(polylist)
spdf <- SpatialPolygonsDataFrame(polylist, data=data.frame(id=1:length(polylist)))
spdf <- SpatialPolygonsDataFrame(polylist, data=data.frame(id=0:length(polylist)-1))
spdf <- SpatialPolygonsDataFrame(polylist, data=data.frame(id=0:(length(polylist)-1)))
data.frame(id=0:(length(polylist)-1))
data(Snow.pumps)
library(HistData)
data(Snow.pumps)
Snow.pumps
plot(Snow.pumps$x, Snow.pumps$y, asp=1)
data(Snow.deaths)
head(Snow.deaths)
points(Snow.deaths$x, Snow.deaths$y, pch=16, cex=0.5, col='red')
plot(Snow.pumps$x, Snow.pumps$y, asp=1, pch=as.character(Snow.pumps$pump))
points(Snow.deaths$x, Snow.deaths$y, pch=16, cex=0.5, col='red')
text(Snow.pumps$x, Snow.pumps$y, labels=as.character(Snow.pumps$pump))
######################
# creates shapes by proximity to 8 pumps, and adds to the cholera data#
######################
#
rm(list=ls())#
#
library(epimap)
library(deldir)#
library(sp)#
#
data(cholera)#
#
# first do a triangulation to get the areas served by each pump#
boxes <- array(c(cholera$pumps@bbox, cholera$deaths@bbox), dim=c(2,2,2))#
x <- cholera$pumps@coords[,1]#
y <- cholera$pumps@coords[,2]#
vt <- deldir(x, y, #
	rw=c(min(boxes[1,1,])-0.0005, max(boxes[1,2,])+0.0005, min(boxes[2,1,])-0.0005, max(boxes[2,2,])+0.0005)#
	)#
tiles <- tile.list(vt)#
#
# now add each in turn to a list of Polygons#
polylist <- list()#
for(i in 1:length(tiles)){#
	Sri <- Polygon(#
			matrix(c(tiles[[i]]$x, tiles[[i]]$x[1], tiles[[i]]$y, tiles[[i]]$y[1]), ncol=2),#
			hole=FALSE)#
	Srsi <- Polygons(list(Sri), paste("pump", i))#
	polylist <- c(polylist, Srsi)#
	}#
polylist <- SpatialPolygons(polylist, 1:length(polylist))
plot(x, y, pch=16, col=NULL, asp=1, xlim=c(min(boxes[1,1,])-0.0005, max(boxes[1,2,])+0.0005), ylim=c(min(boxes[2,1,])-0.0005, max(boxes[2,2,])+0.0005))
text(x, y, as.charaacter(1:length(polylist)))
text(x, y, as.character(1:length(polylist)))
# areas#
plot(vt, wlines="tess", lty="solid", add=TRUE)#
# add the deaths#
xd <- cholera$deaths@coords[,1]#
yd <- cholera$deaths@coords[,2]#
points(xd,yd,cex=0.5,pch=16,col='red')
plot(x, y, pch=16, col=NULL, asp=1, xlim=c(min(boxes[1,1,])-0.0005, max(boxes[1,2,])+0.0005), ylim=c(min(boxes[2,1,])-0.0005, max(boxes[2,2,])+0.0005))
text(x, y, as.character(1:length(polylist)))
plot(vt, wlines="tess", lty="solid", add=TRUE)
# pumps#
plot(x, y, pch=16, col=NULL, asp=1, xlim=c(min(boxes[1,1,])-0.0005, max(boxes[1,2,])+0.0005), ylim=c(min(boxes[2,1,])-0.0005, max(boxes[2,2,])+0.0005))#
text(x, y, as.character(1:length(polylist)))#
# areas#
plot(vt, wlines="tess", lty="solid", add=TRUE, showpoints=FALSE)#
# add the deaths#
xd <- cholera$deaths@coords[,1]#
yd <- cholera$deaths@coords[,2]#
points(xd,yd,cex=0.5,pch=16,col='red')
######################
# creates shapes by proximity to 8 pumps, and adds to the cholera data#
######################
#
rm(list=ls())#
#
library(epimap)#
library(deldir)#
library(sp)#
#
data(cholera)#
#
# pump names, in order of cholera dataset#
pumpnames <- c("Broad Street", "Crown Chapel", "Great Malborough Street", "Dean Street", "South Soho", "Briddle Street", "Coventry Street", "Warwick")#
#
# first do a triangulation to get the areas served by each pump#
boxes <- array(c(cholera$pumps@bbox, cholera$deaths@bbox), dim=c(2,2,2))#
x <- cholera$pumps@coords[,1]#
y <- cholera$pumps@coords[,2]#
vt <- deldir(x, y, #
	rw=c(min(boxes[1,1,])-0.0005, max(boxes[1,2,])+0.0005, min(boxes[2,1,])-0.0005, max(boxes[2,2,])+0.0005)#
	)#
tiles <- tile.list(vt)#
#
# now add each in turn to a list of Polygons#
polylist <- list()#
for(i in 1:length(tiles)){#
	Sri <- Polygon(#
			matrix(c(tiles[[i]]$x, tiles[[i]]$x[1], tiles[[i]]$y, tiles[[i]]$y[1]), ncol=2),#
			hole=FALSE)#
	Srsi <- Polygons(list(Sri), pumpnames[i])#
	polylist <- c(polylist, Srsi)#
	}#
polylist <- SpatialPolygons(polylist, 1:length(polylist))
polylist
spdf <- SpatialPolygonsDataFrame(polylist, data=data.frame(id=1:length(polylist)))
data.frame(id=1:length(polylist), name=pumpnames)
str(polylist)
######################
# creates shapes by proximity to 8 pumps, and adds to the cholera data#
######################
#
rm(list=ls())#
#
library(epimap)#
library(deldir)#
library(sp)#
#
data(cholera)#
#
# pump names, in order of cholera dataset#
pumpnames <- c("Broad Street", "Crown Chapel", "Great Malborough Street", "Dean Street", "South Soho", "Briddle Street", "Coventry Street", "Warwick")#
#
# first do a triangulation to get the areas served by each pump#
boxes <- array(c(cholera$pumps@bbox, cholera$deaths@bbox), dim=c(2,2,2))#
x <- cholera$pumps@coords[,1]#
y <- cholera$pumps@coords[,2]#
vt <- deldir(x, y, #
	rw=c(min(boxes[1,1,])-0.0005, max(boxes[1,2,])+0.0005, min(boxes[2,1,])-0.0005, max(boxes[2,2,])+0.0005)#
	)#
tiles <- tile.list(vt)#
#
# now add each in turn to a list of Polygons#
polylist <- list()#
for(i in 1:length(tiles)){#
	Sri <- Polygon(#
			matrix(c(tiles[[i]]$x, tiles[[i]]$x[1], tiles[[i]]$y, tiles[[i]]$y[1]), ncol=2),#
			hole=FALSE)#
	Srsi <- Polygons(list(Sri), i)#
	polylist <- c(polylist, Srsi)#
	}#
polylist <- SpatialPolygons(polylist, 1:length(polylist))
spdf <- SpatialPolygonsDataFrame(polylist, #
	data=data.frame(id=1:length(polylist), name=pumpnames)#
	)
source("/Users/Joanna/Documents/hackout/pump_shapefile.R")
rm(list=ls())
load("/Users/Joanna/Documents/hackout/mapData/data/snow_polygons.rda")
ls()
ls(cases)
str(cases)
source("/Users/Joanna/Documents/hackout/pump_shapefile.R")
rm(list=ls())
ls(cases)
ls()
load("/Users/Joanna/Documents/hackout/mapData/data/snow_polygons.rda")
ls()
load("/Users/Joanna/Documents/hackout/mapData/data/snow_linelist.rda")
ls()
pump_areas@data
area_id(snow_linelist, pump_areas, "name")
area_id(cases, pump_areas, "name")
proj4string(cases)
proj4string(polygons)
proj4string(pump_areas)
str(cholera$pumps)
cholera$pumps@proj4string
cholera$deaths@proj4string
source("/Users/Joanna/Documents/hackout/make_linelist.R")
cholera$pumps@proj4string
source("/Users/Joanna/Documents/hackout/pump_shapefile.R")
source("/Users/Joanna/Documents/hackout/make_linelist.R")
pump_areas <- SpatialPolygonsDataFrame(polylist, #
	data=data.frame(id=1:length(polylist), name=pumpnames),#
	proj4string = CRS("+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")#
	)
source("/Users/Joanna/Documents/hackout/pump_shapefile.R")
remove.packages("mapData")
# script to test the mapData demo#
#
rm(list=ls())#
#
# installation and initialisation#
devtools::install_github("Hackout2/mapData")
ls()
# script to test the mapData demo#
#
rm(list=ls())#
#
# installation and initialisation#
devtools::install_github("Hackout2/mapData")#
library(mapData)#
data(snow_linelist)#
data(snow_polygons)
ls()
area_id(cases, pump_areas, "name")
proj4string(cases)
cases
str(cases)
cases@proj4string
load("/Users/Joanna/Documents/hackout/mapData/data/snow_linelist.rda")
cases@proj4string
# script to test the mapData demo#
#
rm(list=ls())#
#
# installation and initialisation#
devtools::install_github("Hackout2/mapData")#
library(mapData)#
data(snow_linelist)#
data(snow_polygons)
proj4string(cases)
library(sp)
proj4string(cases)
area_id(cases, pump_areas, "name")
test <- area_id(cases, pump_areas, "name")
is(test)
str(test)
agg_summaries(cases, var = "sex", by = "name", FUN = length)
agg_summaries(cases, var = "sex", group = "name", FUN = length)
agg_summaries(cases@data, var = "sex", group = "name", FUN = length)
agg_summaries(cases@data, var = "sex", group = "name", FUN = mean)
head(cases$data)
head(cases@data)
cases <- area_id(cases, pump_areas, "name")
agg_summaries(cases@data, var = "sex", group = "name", FUN = mean)
source("/Users/Joanna/Documents/hackout/pump_shapefile.R")
agg_summaries(cases@data, var = "sex", group = "name", FUN = length)
# script to test the mapData demo#
#
rm(list=ls())#
#
# installation and initialisation#
devtools::install_github("Hackout2/mapData")#
library(mapData)#
data(snow_linelist)#
data(snow_polygons)#
#
# density_data#
locations <- density_data(cases)#
head(locations)#
#
# area_id#
cases <- area_id(cases, pump_areas, "name")
agg_summaries(cases@data, var = "sex", group = "name", FUN = length)
table(cases@data$name)
agg_summaries(cases@data, var = "sex", group = "name", FUN = table)
agg_summaries(cases@data, var = "age", group = "name", FUN = mean)
agg_summaries(cases@data, var = "age", group = "name", FUN = median)
agg_summaries(cases@data, var = "age", group = "name", FUN = median, quants=c(0.25,0.75))
agg_summaries(cases@data, var = "age", group = "name", FUN = median, quants=0.25)
agg_summaries(cases@data, var = "age", group = "name", FUN = median, quants=0.75)
agg_summaries(cases@data, var = "age", group = "name", FUN = mean)
library(epimap)
ls()
str(pump_areas)
######################
# creates shapes by proximity to 8 pumps, and adds to the cholera data#
######################
#
rm(list=ls())#
#
library(epimap)#
library(deldir)#
library(sp)#
#
data(cholera)#
#
# pump names, in order of cholera dataset#
pumpnames <- c("Broad Street", "Crown Chapel", "Great Malborough Street", "Dean Street", "South Soho", "Briddle Street", "Coventry Street", "Warwick")#
#
# first do a triangulation to get the areas served by each pump#
boxes <- array(c(cholera$pumps@bbox, cholera$deaths@bbox), dim=c(2,2,2))#
x <- cholera$pumps@coords[,1]#
y <- cholera$pumps@coords[,2]#
vt <- deldir(x, y, #
	rw=c(min(boxes[1,1,])-0.0005, max(boxes[1,2,])+0.0005, min(boxes[2,1,])-0.0005, max(boxes[2,2,])+0.0005)#
	)#
tiles <- tile.list(vt)#
#
# now add each in turn to a list of Polygons#
polylist <- list()#
for(i in 1:length(tiles)){#
	Sri <- Polygon(#
			matrix(c(tiles[[i]]$x, tiles[[i]]$x[1], tiles[[i]]$y, tiles[[i]]$y[1]), ncol=2),#
			hole=FALSE)#
	Srsi <- Polygons(list(Sri), i)#
	polylist <- c(polylist, Srsi)#
	}
Sri
Sri@area
source("/Users/Joanna/Documents/hackout/pump_shapefile.R")
pump_areas@data
load("/Users/Joanna/Documents/hackout/mapData/data/snow_polygons.rda")
ls
ls()
pump_areas@data
calculate_prevalence(pump_areas@data, pops="pop")
head(cases)
head(cases@data)
cases <- area_id(cases, pump_areas, "name")
head(cases@data)
source("/Users/Joanna/Documents/hackout/pump_shapefile.R")
source("/Users/Joanna/Documents/hackout/make_linelist.R")
remove.packages("mapData")
0.0668*365.25
0.07*365.25
source("/Users/Joanna/Documents/ct_trends/model_complexity/example/data_from_mstic.R")
################
# men#
################
#
mstic_m <- mstic[mstic$gender == 0,]#
#
timedata <- data.frame(table(mstic_m$q19_time))#
names(timedata) <- c("time", "frequency")#
timedata$time <- as.numeric(as.character(timedata$time))#
timedata <- timedata[!(timedata$time %in% c(-1, 9999)),]#
timedata$cum.frequency <- cumsum(timedata$frequency)#
#
plot(timedata$time, timedata$frequency)#
plot(timedata$time, timedata$cum.frequency, xlim=c(0,3500), ylim=c(0,500))#
#
fit1 <- nls(#
	cum.frequency ~ tail(cum.frequency, n=1) * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(tau = log(2)/10)#
	)#
fit2 <- nls(#
	cum.frequency ~ A * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(A=700, tau = log(2)/10)#
	)#
lines(timedata$time, predict(fit1))#
lines(timedata$time, predict(fit2), lty=2)
summary(fit1)
################
# men#
################
#
mstic_m <- mstic[mstic$gender == 0,]#
mstic_m <- mstic[mstic$q19_time <= 366,] # exclude anything beyond a year#
#
timedata <- data.frame(table(mstic_m$q19_time))#
names(timedata) <- c("time", "frequency")#
timedata$time <- as.numeric(as.character(timedata$time))#
timedata <- timedata[!(timedata$time %in% c(-1, 9999)),]#
timedata$cum.frequency <- cumsum(timedata$frequency)#
#
plot(timedata$time, timedata$frequency)#
plot(timedata$time, timedata$cum.frequency, xlim=c(0,3500), ylim=c(0,500))#
#
fit1 <- nls(#
	cum.frequency ~ tail(cum.frequency, n=1) * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(tau = log(2)/10)#
	)#
fit2 <- nls(#
	cum.frequency ~ A * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(A=700, tau = log(2)/10)#
	)#
lines(timedata$time, predict(fit1))#
lines(timedata$time, predict(fit2), lty=2)
mstic_m <- mstic[mstic$gender == 0,]#
#mstic_m <- mstic[mstic$q19_time <= 366,] # exclude anything beyond a year#
#
timedata <- data.frame(table(mstic_m$q19_time))#
names(timedata) <- c("time", "frequency")#
timedata$time <- as.numeric(as.character(timedata$time))#
timedata <- timedata[!(timedata$time %in% c(-1, 9999)),]#
timedata$cum.frequency <- cumsum(timedata$frequency)#
#
plot(timedata$time, timedata$frequency)#
plot(timedata$time, timedata$cum.frequency, xlim=c(0,3500), ylim=c(0,500))#
#
fit1 <- nls(#
	cum.frequency ~ tail(cum.frequency, n=1) * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(tau = log(2)/10)#
	)#
fit2 <- nls(#
	cum.frequency ~ A * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(A=700, tau = log(2)/10)#
	)#
lines(timedata$time, predict(fit1))#
lines(timedata$time, predict(fit2), lty=2)
################
# men#
################
#
mstic_m <- mstic[mstic$gender == 0,]#
mstic_m <- mstic[mstic_m$q19_time <= 366,] # exclude anything beyond a year#
#
timedata <- data.frame(table(mstic_m$q19_time))#
names(timedata) <- c("time", "frequency")#
timedata$time <- as.numeric(as.character(timedata$time))#
timedata <- timedata[!(timedata$time %in% c(-1, 9999)),]#
timedata$cum.frequency <- cumsum(timedata$frequency)#
#
plot(timedata$time, timedata$frequency)#
plot(timedata$time, timedata$cum.frequency, xlim=c(0,3500), ylim=c(0,500))#
#
fit1 <- nls(#
	cum.frequency ~ tail(cum.frequency, n=1) * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(tau = log(2)/10)#
	)#
fit2 <- nls(#
	cum.frequency ~ A * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(A=700, tau = log(2)/10)#
	)#
lines(timedata$time, predict(fit1))#
lines(timedata$time, predict(fit2), lty=2)
################
# men#
################
#
mstic_m <- mstic[mstic$gender == 0,]#
mstic_m <- mstic_m[mstic_m$q19_time <= 366,] # exclude anything beyond a year#
#
timedata <- data.frame(table(mstic_m$q19_time))#
names(timedata) <- c("time", "frequency")#
timedata$time <- as.numeric(as.character(timedata$time))#
timedata <- timedata[!(timedata$time %in% c(-1, 9999)),]#
timedata$cum.frequency <- cumsum(timedata$frequency)#
#
plot(timedata$time, timedata$frequency)#
plot(timedata$time, timedata$cum.frequency, xlim=c(0,3500), ylim=c(0,500))#
#
fit1 <- nls(#
	cum.frequency ~ tail(cum.frequency, n=1) * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(tau = log(2)/10)#
	)#
fit2 <- nls(#
	cum.frequency ~ A * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(A=700, tau = log(2)/10)#
	)#
lines(timedata$time, predict(fit1))#
lines(timedata$time, predict(fit2), lty=2)
################
# men#
################
#
mstic_m <- mstic[mstic$gender == 0,]#
mstic_m <- mstic_m[mstic_m$q19_time <= 366,] # exclude anything beyond a year#
#
timedata <- data.frame(table(mstic_m$q19_time))#
names(timedata) <- c("time", "frequency")#
timedata$time <- as.numeric(as.character(timedata$time))#
timedata <- timedata[!(timedata$time %in% c(-1, 9999)),]#
timedata$cum.frequency <- cumsum(timedata$frequency)#
#
plot(timedata$time, timedata$frequency)#
plot(timedata$time, timedata$cum.frequency, xlim=c(0,400), ylim=c(0,500))#
#
fit1 <- nls(#
	cum.frequency ~ tail(cum.frequency, n=1) * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(tau = log(2)/10)#
	)#
fit2 <- nls(#
	cum.frequency ~ A * (1 - exp(-tau*time)),#
	data = timedata,#
	start = c(A=700, tau = log(2)/10)#
	)#
lines(timedata$time, predict(fit1))#
lines(timedata$time, predict(fit2), lty=2)
source("/Users/Joanna/Documents/ct_trends/model_complexity/example/data_from_mstic.R")
summary(fit1)
devtools::install_github("hackout2/mapData")
vignette("mapData_vignette")
library(mapData)
vignette("mapData_vignette")
?build
build
library(devtools)
build()
setwd("~/Documents/hackout/mapData/")
args(build)
build()
install_github("hackout2/mapData")
library(mapData)
vignette("mapData_vignette")
q()
